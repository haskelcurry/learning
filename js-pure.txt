Давайте відкриємо наш бравзер
(на google.com)

F12

document.body.style.filter = `blur(4px)`;

Давайте розбиратись, що ми щойно зробили.
Веб сторінка складається з 3 речей: HTML, CSS і Javascript.

HTML це скелет, CSS це шкіра і Javascript це пульт керування.
Точніше кажучи, це Текст, Стиль і Функціонал / Інтреактив.

Будь-яка веб сторінка це текст, який є оформлений певним чином, 
і щось відбувається коли ми щось робимо.

Давайте по черзі розглянемо ці складові.
Почнемо з Тексту, HTML.

Давайте відкриємо вкладку Elements. Це і є HTML!

(гугль HTML,  потім Гіпертекст вікі)
Тобто Гіпертекст це просто Текст з лінками (посиланнями) на інший текст (сторінки).
Весь Інтернет про це, чи не так? Сторінки з лінками на інші сторінки!

Але зазвичай, просто тексту нам недостатньо.
Нам треба кнопки, меню, сайдбари, картинки з котиками і так далі!
(показувати прямо у вікі) 
Тобто, ми хочемо, щоб наш текст мав певне Розташування (Верстка, Layout).
От HTML існує якраз для цього!
Ось як він виглядає (повернутись на Elements).

Зверніть увагу, що кожна частина цієї верстки відповідає певній штуці на сторінці.
(показати)

Праворуч ви бачите те що називається CSS (google вікі)
Насправді, просто верстки, розташування, нам недостатньо. 
Ми хочемо додати розміри, відступи,
кольори, тіні, блиск і зірочки -- так званий СТИЛЬ.

Чому "каскадні"? Ну, тому що кожен стиль може бути "перекритий" іншим стилем,
і у них є певний пріорітет (гугль каскадний)

А тепер давайте поглянемо ближче на нашу істоту.
HTML, як і будь-яка інша істота, має голову і тіло.
В head містяться різні нудні налаштування і інші теоретичні речі. Погляньмо на body.
Щойно ми задали CSS властивість body: filter. Фільтр додає прикольні ефекти (показати усі).
Це ваша перша CSS властивість (property).

document.body.style.filter = `blur(4px)`;

Set the property. Задати властивість, встановити властивість.

Прекрасно. Тепер, коли ви знаєте HTML і CSS, давайте повернемось до Javascript.

(питання?)

document

Це обʼєкт. Обʼєкт це штучка, яка має властивості. Ми вже задавали властивості, ви памʼятаєте.
Обʼєкт document це пульт керування до сторінки, яку ми зараз бачимо.
Щоб взяти властивість обʼєкту, ми ставимо крапку:

document.head

Ось наша head!

document.body

Ось наше body!

document.body.style.background = `red`;

Бачите, як я використовую цей пульт керування щоб змінювати контент сторінки.

document.body.style.background = `green`;
document.body.style.background = `yellow`;

Ок, але це довго писати! Я хочу змінювати стиль body, а мені доводиться щоразу писати повнісю...
Було б круто мати скорочення, вказівник на стиль... Ось як це зробити:

let myStyle = document.body.style;

"let" означає "нехай". Тобто я кажу: "нехай myStyle буде document body style!"

myStyle.background = `cyan`;

Оця штука "let" називається "змінною", "a variable".
Змінна може вказувати на будь-що.
Наша змінна "myStyle" вказує на стиль елементу body.
Давайте наробимо ЩЕ змінних:

let x = 1  --  число
let y = `кіт`  --  строка
let b = document.body  -- обʼєкт

(питання?)

b.innerHTML = `<button>Натисни!</button>`;

Бачите як я можу змінювати HTML нашого body (показати Elements)

b.innerHTML = `<button>Натисни!</button><button>Натисни!</button>`;
...більше кнопочок!

b.innerHTML = `<button>Натисни!</button><button>Натисни!</button><button>Натисни!</button>`;

Бачите, інколи мені доводиться повторювати одну і ту саму роботу багато разів...
А якби я хотів 15 кнопок?  100 кнопок?  Я не хочу писати стільки коду!

Відповідь це:  функції!  Функція це порція коду, яку можна повторно використовувати:

let buttons = (n) => `<button>Click me!</button>`.repeat(n);
(ми це так і називаємо, "стрілочка")
(хай buttons це функція, якій я даю число n, і вона повторює цю строку n разів!)

b.innerHTML = buttons(15);

А я хочу більше!

b.innerHTML = buttons(1500);    клас

Отже, наша змінна buttons тепер вказує на функцію!
Ми бачили, як змінна вказує на число, строку, обʼєкт, а от тепер на функцію.

Давайте зробимо ще одну функцію:

let setBody = (html) => { document.body.innerHTML = html };
setBody(`тест`);
setBody(buttons(15));
setBody(`щось інше`);
setBody(buttons(1));

"хай setBody це буде функція, яка приймає аргумент html і встановлює HTML нашому body"

(питання?)

Тепер... скажімо ми хочемо щось зробити, коли клікаємо на кнопку.
Для початку, я б хотів зробити змінну, яка б "вказувала" на цю кнопку.
Як це зробити?
Для цього у нас є "селектори", від слова "select":

let button = document.querySelector(`button`);

Селектор це просто строка, яка каже, що саме я хочу "вибрати" зі сторінки.
Тут я кажу "хай змінна button вказує на ось це". querySelector перекладається "зробити вибірку".

(показати, що змінна тепер вказує на кнопку)

Отже, ми бачили змінні, які вказують на числа, строки, обʼєкти, функції, 
а ця змінна вказує на HTML елемент на сторінці -- кнопку.

Бачите, тепер у нас є пульт керування цією кнопкою!
Давайте тепер зробимо щось при натисканні на неї...

button.addEventListener(`click`, () => { alert(`Мене клікнули!`) });

"add" - додати
"event" - подія
"listener" - прослухувач

"button . (метод) слухати подію click...  і що зробити, коли подія відбувається"

alert - це вбудована функція, яка показує віконечко з повідомленням.
"alert" означає "сповіщення".

"хай кнопка слухає подію click...  і сповіщає, що її клікнули"

Event в Javascript це певна подія, такая як: клік, натискання клавіші, рух мишки і т.д.
Є безліч різноманітних івентів, але більшість часу ми використвуємо лише декілька основних,
таких як клік.

Давайте трошки розширимо цей функціонал, і будемо рахувати, скільки раз кнопку натисли.
Введемо нову змінну n, число, хай вона буде 0:

let n = 0;

n++;

button.addEventListener(`click`, () => { n++; alert(`Мене клікнули ${n} разів!`) });

(питання?)

Ок, давайте зробимо ще щось цікаве. 
Хай наша кнопка стрибає по сторінці!
(перейти на Elements)
Бачите, наш HTML займає лише одну лінію по висоті.
Давайте зробимо щоб він зайняв усю висоту сторінки, 
щоб кнопці було достатньо місця щоб стрибати:

height: 100%;
button.style.position = 'relative'; (вручну)

"position" це CSS властивість, яка задає... позиціонування елементу на сторінці.
"relative" означає "відносно поточного положення". 
Нічого особливого, просто я не хочу зараз на цьому зупинятись.
Ми повернемось до цього пізніше.

setInterval(() => { 
  button.style.left = Math.random() * 1000 + 'px'; 
  button.style.top = Math.random() * 500 + 'px';
}, 1000);

setInterval - ще одна вбудована функція, вона запускає задану ф-цію багаторазово 
з певним інтервалом.
1000 мілісекунд це 1 секунда.

Тепер давайте додамо трохи анімації:

button.style.transition = 'left 1s ease, top 1s ease';

"transition" (гугль css transition) це інша класна CSS властивість, 
яка анімує певні інші CSS властивості. 
Тут я хочу анімувати властивість left на 1 секунду, а "ease" це тип анімації,
давайте спробуємо інші. (в Elemenets)

(питання?)


Ок, давайте зробимо ще щось. 
Давайте повернемось на наш google.com і зробимо ще пару фокусів:

let b = document.body;
b.style.transition = 'filter 1s';
setInterval(() => b.style.filter = `hue-rotate(${Math.random() * 360}deg)`, 1000);



let avatar = document.querySelector('img');
avatar.style.position = 'fixed';

(Знову позиціонування. Поговоримо про нього наступного разу, але 'fixed' означає, що
елемент буде позиціонуватись відносно всієї сторінки)

document.body.addEventListener('mousemove', e => {
  avatar.style.left = e.screenX + 'px'; 
  avatar.style.top = e.screenY + 'px'
});
